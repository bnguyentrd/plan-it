stages:
  - test
  - build
  - deploy

# Run flake8 to check for code quality
lint-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - pip install flake8
    - flake8 accounts_service
    # - flake8 accounts_service events_service  might need to add events service later

# Run the unit tests
# api-unit-test-job:  ORIGINAL
accounts_service-unit-test-job:
  image: python:3-bullseye
  stage: test
  needs:
    - lint-test-job
  script:
    - cd accounts_service
    - pip install -r requirements.txt
    - python -m pytest

# Build the React/JavaScript front-end
build-front-end-job:
  # rules added per learn. lines 30-32
  rules:
    # Only run if pushing to the main branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: build
  image: node:lts-bullseye
  needs:
    - lint-test-job
    - accounts_service-unit-test-job
    # added line 37 as per instructions on learn. unsure if this will work since we havent written any unit tests yet.
  variables:
    # If either of these variables is defined in the GitLab
    # CI/CD variables, that value will override the value here.
    # You need to substitute in your real values for
    # GROUP_NAME, PROJECT_NAME, & WEBSERVICE_NAME below.
    PUBLIC_URL: https://plan-it.gitlab.io/plan-it/
    REACT_APP_SAMPLE_SERVICE_API_HOST: https://WEBSERVICE_NAME.onrender.com
  script:
    - cd ghi
    - npm install
    - npm run build
    - cp build/index.html build/404.html
  artifacts:
    paths:
      - ghi/build/

# lines 56-83 added from Learn: Continuous deployment D4
build-accounts-image-job:
  rules:
    # Only run if pushing to the main branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    # DO THIS FOR EACH SERVICE YOU NEED TO BUILD A DOCKER
    # IMAGE FOR
    - cd accounts_service

    # Builds the image CHANGE THE /app FOR EACH SERVICE
    - docker build -t ${CI_REGISTRY_IMAGE}/app:latest .

    # Gives the image a specific name
    - docker tag ${CI_REGISTRY_IMAGE}/app:latest ${CI_REGISTRY_IMAGE}/app:$CI_JOB_ID

    # Authenticates with the GitLab image registry
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY

    # Stores your image in the GitLab image registry
    # with two different tags, the version from the tag
    # and the name "latest"
    - docker push ${CI_REGISTRY_IMAGE}/app:$CI_JOB_ID
    - docker push ${CI_REGISTRY_IMAGE}/app:latest

build-events-image-job:
  rules:
    # Only run if pushing to the main branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    # DO THIS FOR EACH SERVICE YOU NEED TO BUILD A DOCKER
    # IMAGE FOR
    - cd events_service

    # Builds the image CHANGE THE /app FOR EACH SERVICE
    - docker build -t ${CI_REGISTRY_IMAGE}/app:latest .

    # Gives the image a specific name
    - docker tag ${CI_REGISTRY_IMAGE}/app:latest ${CI_REGISTRY_IMAGE}/app:$CI_JOB_ID

    # Authenticates with the GitLab image registry
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY

    # Stores your image in the GitLab image registry
    # with two different tags, the version from the tag
    # and the name "latest"
    - docker push ${CI_REGISTRY_IMAGE}/app:$CI_JOB_ID
    - docker push ${CI_REGISTRY_IMAGE}/app:latest

build-polls-image-job:
  rules:
    # Only run if pushing to the main branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    # DO THIS FOR EACH SERVICE YOU NEED TO BUILD A DOCKER
    # IMAGE FOR
    - cd polls_service

    # Builds the image CHANGE THE /app FOR EACH SERVICE
    - docker build -t ${CI_REGISTRY_IMAGE}/app:latest .

    # Gives the image a specific name
    - docker tag ${CI_REGISTRY_IMAGE}/app:latest ${CI_REGISTRY_IMAGE}/app:$CI_JOB_ID

    # Authenticates with the GitLab image registry
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY

    # Stores your image in the GitLab image registry
    # with two different tags, the version from the tag
    # and the name "latest"
    - docker push ${CI_REGISTRY_IMAGE}/app:$CI_JOB_ID
    - docker push ${CI_REGISTRY_IMAGE}/app:latest

# Deploy the React/JavaScript front-end to GitLab pages
pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - build-front-end-job
  needs:
    - build-front-end-job
  script:
    - mv ghi/build/ public
  artifacts:
    paths:
      - public

# deploy-accounts-image-job:
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   stage: deploy
#   image: docker:20.10.16
#   needs:
#     - build-accounts-image-job
#   services:
#     - docker:20.10.16-dind
#   script:
#     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#     - docker login --username=_ --password=$CAPROVER_API_KEY registry.heroku.com
#     - docker pull ${CI_REGISTRY_IMAGE}/accounts:latest
#     - docker tag ${CI_REGISTRY_IMAGE}/accounts:latest registry.heroku.com/$CAPROVER_APP/web:latest
#     - docker push registry.heroku.com/$CAPROVER_APP/web:latest

# deploy-events-image-job:
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   stage: deploy
#   image: docker:20.10.16
#   needs:
#     - build-events-image-job
#   services:
#     - docker:20.10.16-dind
#   script:
#     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#     - docker login --username=_ --password=$CAPROVER_API_KEY registry.heroku.com
#     - docker pull ${CI_REGISTRY_IMAGE}/accounts:latest
#     - docker tag ${CI_REGISTRY_IMAGE}/accounts:latest registry.heroku.com/$CAPROVER_APP/web:latest
#     - docker push registry.heroku.com/$CAPROVER_APP/web:latest

# deploy-polls-image-job:
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   stage: deploy
#   image: docker:20.10.16
#   needs:
#     - build-polls-image-job
#   services:
#     - docker:20.10.16-dind
#   script:
#     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#     - docker login --username=_ --password=$CAPROVER_API_KEY registry.heroku.com
#     - docker pull ${CI_REGISTRY_IMAGE}/accounts:latest
#     - docker tag ${CI_REGISTRY_IMAGE}/accounts:latest registry.heroku.com/$CAPROVER_APP/web:latest
#     - docker push registry.heroku.com/$CAPROVER_APP/web:latest

build-docker-master:
  image: docker:19.03.1
  stage: build
  services:
    - docker:19.03.1-dind
  before_script:
    - export DOCKER_REGISTRY_USER=$CI_REGISTRY_USER # built-in GitLab Registry User
    - export DOCKER_REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD # built-in GitLab Registry Password
    - export DOCKER_REGISTRY_URL=$CI_REGISTRY # built-in GitLab Registry URL
    - export COMMIT_HASH=$CI_COMMIT_SHA # Your current commit sha
    - export IMAGE_NAME_WITH_REGISTRY_PREFIX=$CI_REGISTRY_IMAGE # Your repository prefixed with GitLab Registry URL
    - docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD" $DOCKER_REGISTRY_URL # Instructs GitLab to login to its registry

  script:
    - echo "Building..." # MAKE SURE NO SPACE ON EITHER SIDE OF = IN THE FOLLOWING LINE
    - export CONTAINER_FULL_IMAGE_NAME_WITH_TAG=$IMAGE_NAME_WITH_REGISTRY_PREFIX/my-build-image:$COMMIT_HASH
    - docker build -f ./Dockerfile --pull -t built-image-name .
    - docker tag built-image-name "$CONTAINER_FULL_IMAGE_NAME_WITH_TAG"
    - docker push "$CONTAINER_FULL_IMAGE_NAME_WITH_TAG"
    - echo $CONTAINER_FULL_IMAGE_NAME_WITH_TAG
    - echo "Deploying on CapRover..."
    - docker run caprover/cli-caprover:v2.1.1 caprover deploy --caproverUrl $CAPROVER_URL --caproverPassword $CAPROVER_PASSWORD --caproverApp $CAPROVER_APP --imageName $CONTAINER_FULL_IMAGE_NAME_WITH_TAG
  only:
    - master


